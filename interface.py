from getpass import getpass

class Interface:
    
    def __init__(self):
        # Initialise the interface object when main.py is run.
        self.uid = None
        self.urole = None
        self.first_name = None
        
        self.motd() # call motd to display
    
    
    def motd(self):
        '''
        Display the motd including privacy and data policies. Prompts user to accept the ToS.
        If user agrees, display login prompt. If user disagrees, terminate CLI.
        '''
        pass
    
    
    def login(self):
        '''
        Asks user to enter username and password. If combination is found, logs user in and saves the user id, role and first name.
        If combination is incorrect after third try, that specific user will be locked from logging in again.
        '''  
        inpt_username = self.username_input()
        inpt_password = getpass(prompt="Please enter you Password: ")
        # auth_user = authentication.existing_user(inpt_username,inpt_password) -> tuple(uid, urole, firstname, status, last_login)
        # check if locked account
        # check if first time login
        # set uid, urole and firstname
        # print(f"Access Granted! Welcome back, {self.firstname}.")
        self.handle_main()
    
    
    def handle_main(self):
        '''
        Handler to display main menu options based on user's role.
        1 = Administrator
        2 = Specialist
        3 = Third-Party Authority
        '''
        if self.urole == 1:
            self.admin_menu()
        elif self.urole == 2:
            self.specialist_menu()
        elif self.urole == 3:
            self.authority_menu()
        else:
            print(f"Error: User Role not set correctly. Current value set to: {self.urole}")
    
    
    def admin_menu(self):
        '''
        Displays main menu options for the administrator role. Depending on choice, will trigger the operation from the admin_operations module.
        Choices include:
        Creating a new user, modifying an existing user, deactivating (soft deleting) an existing user, unlocking a user, logout.
        '''
        print('''
            \nPlease select what you want to do:\n 
            \n 1. Create New User
            \n 2. Modify Existing User
            \n 3. Deactivate User
            \n 4. Unlock User 
            \n 5. Logout
            ''')
        choice = self.choice_input(5)
        if choice == 1:
            self.create_user()
        elif choice == 2:
            self.modify_user()
        elif choice == 3:
            self.deactivate_user()
        elif choice == 4:
            self.unlock_user()
        else:
            self.logout()
        
    
    def specialist_menu(self):
        '''
        Displays main menu options for the specialist (employee) role. Depending on choice, will trigger the operation from the operations module.
        Choices include: Search existing sources, create a new source, logout.
        '''
        print('''
            \nPlease select what you want to do:\n 
            \n 1. Search Source
            \n 2. Create New Source Entry
            \n 3. Logout
            ''')
        choice = self.choice_input(3)
        if choice == 1:
            self.search_sources()
        elif choice == 2:
            self.create_source()
        else
            self.logout()
            
    
    def authority_menu(self):
        '''
        Displays main menu options for the authority (third-party) role. Depending on choice, will trigger the operation from the operations module.
        Choices include: Search existing sources, logout.
        '''
        print('''
            \nPlease select what you want to do:\n 
            \n 1. Search Source
            \n 2. Logout
            ''')
        choice = self.choice_input(2)
        if choice == 1:
            self.search_sources()
        else
            self.logout()
    
    
    def create_user(self):
        '''
        Prompts information and inputs for new user creation. If entered details pass validation, calls admin_operations module to execute the creation on
        the database level.
        
        Validation rules:
        First Name:
        Last Name:
        Date of Birth:
        Email:
        
        If user is registered successfully, the user password will be autogenerated and sent to the user's email address.
        '''
        
    
    def modify_user(self):
        pass
    
    
    def deactivate_user(self):
        pass
    
    
    def unlock_user(self):
        pass
    
    
    def search_sources(self):
        pass
    
    
    def create_source(self):
        pass
    
    
    def logout(self):
        # Message to be displayed when logout is chosen.
        print(f"Thank you for using the NCSC Suspect Sources System. See you soon, {self.first_name}!")
        quit()
    
    
    def choice_input(self, num_choices:int) -> int:
        '''
        Wrapper to validate the user input for a menu selection. The amount of different options to choose from can be set
        with the argument "num_choices".
        
        Returns the chosen option as an Integer.
        '''
        user_input = input("\nSelect option: ")
        try:
            int_input = int(user_input)
        except:
            print("Invalid selection. Please check your input and try again.")
            return self.choice_input(num_choices)
        if int_input > 0 and int_input <= num_choices:
            return int_input
        else:
            print("Invalid selection. Please check your input and try again.")
            return self.choice_input(num_choices)    
    
    
    def username_input(self) -> str:
        '''
        Wrapper to validate and sanitise the user input for username.
        Ensures that entered string is following the validation rules and, if so, returns the entered string.
        '''
        VALID_CHAR = ('.','_','-')
        MIN_LEN = 5
        
        input_user = input("\nPlease enter your Username: ")
        
        if len(input_user) < MIN_LEN: # checks the length of the entered username
            print("Entered username is invalid. Please check and try again.")
            return self.username_input()
        
        for char in input_user: # checks each character of user input 
            if char.isalnum(): 
                continue # continue if current char is either alpha or numerical
            elif char in VALID_CHAR:
                continue # continue if current char is part of the valid characters tuple
            else:
                print("Entered username is invalid. Please check and try again.")
                return self.username_input()
            
        return input_user # returns entered string if all validation rules are met
    
    
    def password_input(self) -> str:
        '''
        Wrapper to validate and sanitise the user input for password.
        Ensures that entered string is following the validation rules and, if so, returns the entered string.
        '''
        pass
    
    
    def name_input(self) -> str:
        '''
        Wrapper to validate and sanitise the user input for first and lastname.
        Ensures that entered string is following the validation rules and, if so, returns the entered string.
        '''
        pass
    
    
    def email_input(self) -> str:
        '''
        Wrapper to validate and sanitise the user input for email.
        Ensures that entered string is following the validation rules and, if so, returns the entered string.
        '''
        pass
    
    
    def dob_input(self) -> str:
        '''
        Wrapper to validate and sanitise the user input date of birth.
        Ensures that entered string is following the validation rules and, if so, returns the entered string.
        '''
        pass